1. Playground Name Schema

{
    "collection": "PlaygroundNames",
    "schema": {
      "ASSET_CD": {
        "type": "String",
        "unique": true,
        "required": true
      },
      "name": {
        "type": "String",
        "required": true
      }
    }
  }


  2. Playground Surface Schema

  {
    "collection": "PlaygroundSurfaces",
    "schema": {
      "ASSET_CD": {
        "type": "String",
        "unique": true,
        "required": true
      },
      "name_id": {
        "type": "String",
        "ref": "PlaygroundNames",
        "required": true
      },
      "polygons": [{
        "type": {
          "type": "String",
          "enum": ["Polygon"],
          "default": "Polygon"
        },
        "coordinates": {
          "type": [[[Number]]], // Array of arrays of arrays of coordinates (longitude, latitude)
          "required": true
        }
      }]
    }
  }


  3. Playground Equipment Schema

  {
    "collection": "PlaygroundEquipment",
    "schema": {
      "ASSET_CD": {
        "type": "String",
        "unique": true,
        "required": true
      },
      "surface_id": {
        "type": "String",
        "ref": "PlaygroundSurfaces",
        "required": true
      },
      "type_description": {
        "type": "String",
        "required": true
      },
      "maint_info": "String",
      "minortype": "String",
      "location": {
        "type": {
          "type": "String",
          "enum": ["Point"],
          "default": "Point"
        },
        "coordinates": {
          "type": [Number], // Array of longitude and latitude
          "required": true
        }
      }
    }
  }  



  4. Data Retrieval Example


  db.PlaygroundSurfaces.aggregate([
    {
      $lookup: {
        from: "PlaygroundNames",
        localField: "name_id",
        foreignField: "ASSET_CD",
        as: "playgroundName"
      }
    },
    {
      $lookup: {
        from: "PlaygroundEquipment",
        localField: "ASSET_CD",
        foreignField: "surface_id",
        as: "equipment"
      }
    }
  ]);






  new Schema model for every one of them

  // models/playgroundSurface.js
const mongoose = require('mongoose');

const playgroundSurfaceSchema = new mongoose.Schema({
  ASSET_CD: { type: String, unique: true },
  the_geom: { type: String },
  
});

const PlaygroundSurface = mongoose.model('PlaygroundSurface', playgroundSurfaceSchema);

module.exports = PlaygroundSurface;


// models/playgroundEquipment.js
const mongoose = require('mongoose');

const equipmentSchema = new mongoose.Schema({
  MAINT_INFO: String,
  TYPE_DESCRIPTION: String,
  MINORTYPE: String,
  EQUIPMENT_AGE_CLASS: String,
  POINT: String, 
});

const playgroundSchema = new mongoose.Schema({
  ASSET_CD: { type: String, unique: true },
  name: String, 
  equipment: [equipmentSchema], 
  
});

const Playground = mongoose.model('Playground', playgroundSchema);

module.exports = Playground;



// models/playgroundName.js
const mongoose = require('mongoose');

const playgroundNameSchema = new mongoose.Schema({
  ASSET_CD: { type: String, unique: true },
  SITE_NAME: String,
  COMMUNITY_NAME: String,
});

const PlaygroundName = mongoose.model('PlaygroundName', playgroundNameSchema);

module.exports = PlaygroundName;


// routes/playgroundSurface.js
const express = require('express');
const router = express.Router();
const PlaygroundSurface = require('../models/playgroundSurface');
const PlaygroundEquipment = require('../models/playgroundEquipment');
const PlaygroundName = require('../models/playgroundName');

// Get playground data by Asset_Cd
router.get('/:assetCd', async (req, res) => {
  try {
    const { assetCd } = req.params;
    const surfaceData = await PlaygroundSurface.findOne({ ASSET_CD: assetCd });
    const equipmentData = await PlaygroundEquipment.findOne({ ASSET_CD: assetCd });
    const nameData = await PlaygroundName.findOne({ ASSET_CD: assetCd });

    // Combine the data into a single object
    const playgroundData = {
      surface: surfaceData,
      equipment: equipmentData,
      name: nameData,
    };

    res.json(playgroundData);
  } catch (error) {
    console.error('Error fetching playground data:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;


// PlaygroundDetails.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';

function PlaygroundDetails({ assetCd }) {
  const [playgroundData, setPlaygroundData] = useState(null);

  useEffect(() => {
    // Fetch playground data based on the assetCd
    axios.get(`/api/playground/${assetCd}`)
      .then((response) => {
        setPlaygroundData(response.data);
      })
      .catch((error) => {
        console.error('Error fetching playground data:', error);
      });
  }, [assetCd]);

  if (!playgroundData) {
    return <p>Loading...</p>;
  }

  return (
    <div>
      <h2>{playgroundData.name}</h2>
      <p>Surface Coordinates: {playgroundData.surface}</p>
      <p>Equipment:</p>
      <ul>
        {playgroundData.equipment.map((item) => (
          <li key={item._id}>
            {item.TYPE_DESCRIPTION} ({item.MINORTYPE})
          </li>
        ))}
      </ul>
      {/* Other relevant information */}
    </div>
  );
}

export default PlaygroundDetails;



//react fetching

import React, { useState, useEffect } from 'react';
import axios from 'axios';

function PlaygroundDetails() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    axios.get('/api/playgroundSurface/MAL505') // Replace with your API endpoint
      .then((response) => {
        setData(response.data);
      })
      .catch((error) => {
        setError(error.message);
      })
      .finally(() => {
        setLoading(false);
      });
  }, []);

  if (loading) {
    return <p>Loading...</p>;
  }

  if (error) {
    return <p>Error: {error}</p>;
  }

  return (
    <div>
      {/* Display data from the API */}
      {/* Example: <p>Surface: {data.surface}</p> */}
    </div>
  );
}

export default PlaygroundDetails;















Embedded Documents 


// models/playgroundEquipment.js
const mongoose = require('mongoose');

const playgroundEquipmentSchema = new mongoose.Schema({
  ASSET_CD: { type: String, unique: true },
  equipment: [
    {
      type: { type: String }, // e.g., 'swings', 'slides', etc.
      coordinates: [{ type: String }], // Array of coordinates
      // Other relevant fields specific to equipment
    },
  ],
  // Other fields related to the playground equipment
});

const PlaygroundEquipment = mongoose.model('PlaygroundEquipment', playgroundEquipmentSchema);

module.exports = PlaygroundEquipment;


// models/playgroundSurface.js
const mongoose = require('mongoose');

const playgroundSurfaceSchema = new mongoose.Schema({
  ASSET_CD: { type: String, unique: true },
  surfaces: [
    {
      type: { type: String }, // e.g., 'swings', 'slides', etc.
      coordinates: [{ type: String }], // Array of coordinates
      // Other relevant fields specific to surface
    },
  ],
  // Other fields related to the playground surface
});

const PlaygroundSurface = mongoose.model('PlaygroundSurface', playgroundSurfaceSchema);

module.exports = PlaygroundSurface;











References
// Example route for fetching playground data
router.get('/:assetCd', async (req, res) => {
  try {
    const { assetCd } = req.params;
    const playground = await Playground.findOne({ ASSET_CD: assetCd })
      .populate('equipment') // Populate the 'equipment' field
      .populate('surfaceCoordinates'); // Populate the 'surfaceCoordinates' field

    if (!playground) {
      return res.status(404).json({ error: 'Playground not found' });
    }

    res.json(playground);
  } catch (error) {
    console.error('Error fetching playground data:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});



// PlaygroundDetails.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';

function PlaygroundDetails({ assetCd }) {
  const [playgroundData, setPlaygroundData] = useState(null);

  useEffect(() => {
    // Fetch playground data based on the assetCd
    axios.get(`/api/playground/${assetCd}`)
      .then((response) => {
        setPlaygroundData(response.data);
      })
      .catch((error) => {
        console.error('Error fetching playground data:', error);
      });
  }, [assetCd]);

  if (!playgroundData) {
    return <p>Loading...</p>;
  }

  return (
    <div>
      <h2>{playgroundData.name}</h2>
      <p>Equipment:</p>
      <ul>
        {playgroundData.equipment.map((item) => (
          <li key={item._id}>
            {item.TYPE_DESCRIPTION} ({item.MINORTYPE})
          </li>
        ))}
      </ul>
      {/* Other relevant information */}
    </div>
  );
}

export default PlaygroundDetails;











// Example route for fetching playground data
router.get('/:assetCd', async (req, res) => {
  try {
    const { assetCd } = req.params;
    const playground = await Playground.findOne({ ASSET_CD: assetCd })
      .populate('equipment') // Populate the 'equipment' field
      .populate('surfaceCoordinates'); // Populate the 'surfaceCoordinates' field

    if (!playground) {
      return res.status(404).json({ error: 'Playground not found' });
    }

    res.json(playground);
  } catch (error) {
    console.error('Error fetching playground data:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});



// PlaygroundDetails.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';

function PlaygroundDetails({ assetCd }) {
  const [playgroundData, setPlaygroundData] = useState(null);

  useEffect(() => {
    // Fetch playground data based on the assetCd
    axios.get(`/api/playground/${assetCd}`)
      .then((response) => {
        setPlaygroundData(response.data);
      })
      .catch((error) => {
        console.error('Error fetching playground data:', error);
      });
  }, [assetCd]);

  if (!playgroundData) {
    return <p>Loading...</p>;
  }

  return (
    <div>
      <h2>{playgroundData.name}</h2>
      <p>Equipment:</p>
      <ul>
        {playgroundData.equipment.map((item) => (
          <li key={item._id}>
            {item.TYPE_DESCRIPTION} ({item.MINORTYPE})
          </li>
        ))}
      </ul>
      {/* Other relevant information */}
    </div>
  );
}

export default PlaygroundDetails;
